#define _CRT_SECURE_NO_WARNINGS
#include "Stack_Link.h"

#define START 1 // 매크로 사용
#define END 0

//현재 스택의 모든 멤버를 조회
void ViewStackMember(Stack* pStack)
{
    StackNode* temp = pStack->top; // temp는 pStackNode형으로, 현재 Stack의 Top 노드의 주소할당

    if (IsEmptyStack(pStack)) // Stack이 비어있으면 반환.
    {
        printf("STACK Stat : NULL\n");        return;
    }
    else // 아니면 스택멤버 조회
    {
        printf("STACK Stat : ");
        for (int i = 0; i < pStack->count; i++) // 스택 멤버의 총 수까지 반복.
        {
            printf("%s ", temp->data); //현재 노드의 데이터 출력
            temp = temp->next; // temp에 다음 노드의 주소 할당.
        }
        printf("(%d)\n", pStack->count);
    }
}

//Convert 10 to 12
char* decToduo(int *decimal) // 10진수 입력
{
    char* duodeci[100] = { 0, };  // 최대 100가지의 문자열을 가리키는 주소를 담는 포인터 배열 선언
    char* result = (char*)calloc(100, sizeof(char)); //calloc(크기, 사이즈타입) : 할당과 동시에 초기화 해줌, result : 12진수 출력 문자열.
    char temp[2] = { 0, };
    int index = 0;

    Stack* convertStack = CreateStack(1000); // 변환을 위한 스택 할당. // linked 타입에서 사이즈 X

    do    {
        duodeci[index] = (char*)malloc(sizeof(char) * 3); //문자열 배열 주소마다 메모리 동적할당
        duodeci[index] != NULL ? sprintf(duodeci[index], "%d", *decimal % 12) : free(duodeci[index]);
        Push(convertStack, duodeci[index]);
        *decimal = *decimal / 12;
        index < 100 ? index++ : printf("\n evaluation error\n");
    } while (*decimal != 0);
    ;

    while (IsEmptyStack(convertStack) == false)
    {
        switch (atoi(Top(convertStack)))
        {
        case 11:
            strcpy(temp, "B");            Pop(convertStack);
            break;
        case 10:
            strcpy(temp, "A");            Pop(convertStack);
            break;
        default:
            sprintf(temp, "%s", Pop(convertStack));
            break;
        }
        if (result == NULL) break; 
        else  strcat(result, temp);
    }

    DestroyStack(convertStack);    convertStack = NULL;

    
    for (int i = 0; i < index; i++)
    {
        strcat((char*)decimal,duodeci[i]);
        free(duodeci[i]);
    } 
    
    // 저장한 문자열 포인터에서 동적할당 해제
    return result;
}

//Convert 12 to 10
int duoTodec(char* duodecimal)
{
    char temp[3] = { 0, };
    int decimal = 0, i = 0, j = 0;
    for (i = strlen(duodecimal) - 1; i >= 0; i--, j++)
    {
        decimal *= 12;
        if(*(duodecimal + j)=='A') 
        {
            temp[0] = '1'; temp[1] = '0';
        }
        else if(*(duodecimal + j) == 'B')
        {
            temp[0] = '1'; temp[1] = '1';
        }
        else {
            temp[0] = *(duodecimal + j);
            temp[1] = '\0';
        }
        decimal += atoi(temp);
    }
    return decimal;
}

int main()
{
    int sel = 0, selchk = START, inputChk = 0;
    int decimal = 0;
    char* temp;
    Stack* pDuoStack = CreateStack(1000);
    Stack* pDecistack = CreateStack(1000);

    while (selchk)
    {
        
        printf("Push(0), Pop(1), Exit(2) : ");

        if (!scanf(" %d", &sel)) {
            printf("input error, program terminates"); break;
        }

        switch (sel)
        {
        case 0:
            
            printf("Push : ");

            inputChk = scanf(" %d", &decimal);
            if (inputChk != 1) {
                printf("input Error : check your input \n\n");                             break;
            }
            else if (decimal >= 2147483648)
            {
                printf("wrong input number : input range is 0 to 2147483647 \n"); break;
            }
            Push(pDuoStack, decToduo(&decimal));
            Push(pDecistack, (char*)&decimal);
            ViewStackMember(pDuoStack);

            
            printf("\n");
            break;

        case 1:
            printf("Pop : ");
            if (IsEmptyStack(pDuoStack)) 
            {
                printf("Stack is Empty. \n\n"); break;
            }
            temp = Pop(pDuoStack);
            printf("%s (%s) \n", Pop(pDecistack), temp);            free(temp); // 문자열 POP이후 동적할당 해제
            ViewStackMember(pDuoStack);
            printf("\n");
            break;

        case 2:
            printf("Program terminates\n ");
            selchk = END;            break;

        default:
            printf("Check your input : select 0 or 1 or 1 \n\n");         break;
        }       
    }

    DestroyStack(pDuoStack);
    pDuoStack = NULL;
    return 0;
}

